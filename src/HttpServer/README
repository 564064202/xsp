Directory xsp/src/HttpServer
-----------------------------

This directory contains a web server that serves .aspx pages.
It is intended for testing purposes only.

IMPORTANT: right now, it can only generate a given page once until we implement
something that unload assemblies loaded from .dll or move the dll to some other
place before loading them.

How does it work
------------------
Given a HTTP query in the form:

[GET|POST] filename.aspx HTTP/1.0

It generates its C# code using xsp, compiles it with csc, renders the page
and send it back to the client. It does not use System.Web.Hosting classes
when rendering.


How to see it working
-----------------------
* Run make in xsp/src and xsp/src/HttpServer

* Create a directory ./testing

* Copy ../xsp.exe, ../MyForm.dll and server.exe to ./testing.

* Copy some aspx file to ./testing 

* cd ./testing; ./server PORTNUMBER. 
Running it for the first time will create a directory called 'output'. In
'output' you will find all the intermediate files between ASPX and HTML and the
BAT files run from testing directory which create them.

* For real men:

	- telnet 127.0.0.1 PORTNUMBER
	  get yourfile.aspx http/1.0

* For the rest, use your browser: http://127.0.0.1:PORTNUMBER/yourfile.aspx


How to help debugging mono System.Web
----------------------------------------
* Set the environment variable DEBUGMONOSW to any value.

* Run make in mcs/class and copy mcs/class/System.Web.dll to ./testingMono,
xsp/src and xsp/src/HttpServer. If you run make again without the DEBUGMONOSW
environment variable set, it will delete the local copy of System.Web.dll
(just to avoid conflicts).

* Follow the steps in previous section. Now xsp.exe and server.exe
are using mono's System.Web.

* In directory (folder? :) ./testingMono run './server --usemonoclasses PORT'.

* Now you can have ./testing/server.exe using MS System.Web serving pages on 
a port and ./testingMono./server.exe serving on another port.

* Don't forget to read the above IMPORTANT note. You'll have to rerun the
server on every access to a given page.

* Try accesing any .aspx file you have in ./testing.

	o You get an error saying that xxxxx.dll or one of its dependencies
	was not found.

		-Run the file last_compilation_XXXXXX.bat and see if it 
		compiles. Probably not. May be a missing class or feature?
		A bug in Xsp? Go! Implement/fix it!

	o You get incorrect HTML rendered on the browser.

		-Edit xxxxx.cs try to guess which class has the error when
		rendering (may be you already know because that table or 
		button is not what you expected). Then try to fix the error.

	o You get the correct HTML rendered on the browser.
	
		-Congratulations! Put your sample page under xsp/tests if you
		want.


- Enjoy!

